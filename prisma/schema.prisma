generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  maxUsers       Int
  users          User[]
  forms          Form[]
  formTemplates  FormTemplate[]  // Ajouté : relation inverse vers FormTemplate
  createdAt      DateTime        @default(now())
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  name         String
  password     String
  role         Role     @default(USER)
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])
  createdAt    DateTime @default(now())
  filledForms  Form[]   // Ajouté : relation inverse vers Form
}

model FormTemplate {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  schema     Json
  createdBy  String
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
  forms      Form[]
}

model Form {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  filledByUserId String
  user           User          @relation(fields: [filledByUserId], references: [id])
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
  templateId     String
  template       FormTemplate  @relation(fields: [templateId], references: [id])
  data           Json
  files          File[]
  createdAt      DateTime      @default(now())
}

model File {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  type       String   // "image", "audio", "pdf", etc.
  formId     String
  form       Form     @relation(fields: [formId], references: [id])
  uploadedAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  content   String
  recipient String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  MANAGER
  USER
}
